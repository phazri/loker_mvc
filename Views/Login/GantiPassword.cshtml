@using LokerMVC.Models

@{
    ViewBag.Title = "Ganti Password";
    Layout = "_MainLayout";
    bool isHasPassword = ViewBag.IsPelamarHasPassword;
}

<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

@using (Html.BeginForm("GantiPassword", "Login", FormMethod.Post, new { id = "UpdatePasswordForm", @class = "container mt-5" }))
{
    using (Html.DevExtreme().ValidationGroup())
    {
        @Html.AntiForgeryToken()

        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white text-center">
                <h4>Ganti Password</h4>
            </div>
            <div class="card-body">
                @(Html.DevExtreme().Form<GantiPassword>()
                    .OnInitialized("onInitialized")
                    .ShowValidationSummary(true)
                    .Items(items =>
                    {
                        items.AddGroup()
                        .Items(groupItems =>
                        {
                            if (isHasPassword)
                            {
                                groupItems.AddSimpleFor(x => x.PasswordLama)
                            .Label(x => x.Visible(false))
                            .Editor(x => x.TextBox()
                            .Placeholder("Password Lama")
                            .Mode(TextBoxMode.Password)
                            .LabelMode(EditorLabelMode.Floating)
                            .ShowClearButton(true)
                            .ID("password")
                            .Buttons(b =>
                            {
                                b.Add()
            .Name("password")
            .Location(TextEditorButtonLocation.After)
            .Widget(w => w.Button()
            .StylingMode(ButtonStylingMode.Text)
            .Icon("eyeopen")
            .OnClick($"function(data) {{ changePasswordMode('#password'); }}"));
                            }));
                            }

                            groupItems.AddSimpleFor(x => x.PasswordBaru)
                        .Label(x => x.Visible(false))
                        .Editor(x => x.TextBox()
                        .Placeholder("Password Baru")
                        .Mode(TextBoxMode.Password)
                        .LabelMode(EditorLabelMode.Floating)
                        .ShowClearButton(true)
                        .ID("passwordBaru")
                        .Buttons(b =>
                        {
                            b.Add()
                        .Name("password")
                        .Location(TextEditorButtonLocation.After)
                        .Widget(w => w.Button()
                        .StylingMode(ButtonStylingMode.Text)
                        .Icon("eyeopen")
                        .OnClick($"function(data) {{ changePasswordMode('#passwordBaru'); }}"));
                        }));

                            groupItems.AddSimpleFor(x => x.ConfirmPassword)
                        .Label(x => x.Visible(false))
                        .Editor(x => x.TextBox()
                        .Placeholder("Confirm Password")
                        .LabelMode(EditorLabelMode.Floating)
                        .Mode(TextBoxMode.Password)
                        .ShowClearButton(true)
                        .ID("confirmPassword")
                        .Buttons(b =>
                        {
                            b.Add()
                        .Name("password")
                        .Location(TextEditorButtonLocation.After)
                        .Widget(w => w.Button()
                        .StylingMode(ButtonStylingMode.Text)
                        .Icon("eyeopen")
                        .OnClick($"function(data) {{ changePasswordMode('#confirmPassword'); }}"));
                        }));
                        });

                        items.AddGroup()
                        .ColCountByScreen(c => c.Md(2).Sm(2).Lg(2))
                        .CssClass("buttons-group mt-4 text-center")
                        .Items(groupItems =>
                        {
                            groupItems.AddButton()
                        .ButtonOptions(b => b.Text("Back")
                        .Type(ButtonType.Danger)
                        .Width("100%")
                        .ElementAttr(new { @class = "btn btn-warning w-50" })
                        .OnClick("onBackButtonClick"));

                            groupItems.AddButton()
                        .ButtonOptions(b => b.Text("Save")
                        .Type(ButtonType.Default)
                        .Width("100%")
                        .UseSubmitBehavior(true)
                        .ElementAttr(new { @class = "btn btn-success w-50" }));
                        });
                    })
                    .FormData(Model))
            </div>
        </div>
    }
}

@if (!string.IsNullOrWhiteSpace(ViewBag.message))
{
    <div class="alert alert-info mt-3">
        @ViewBag.message
    </div>
}

<script>
    function onInitialized(e) {
        formInstance = e.component;
    }

    function onBackButtonClick() {
        window.location.href = '@Url.Action("Profile", "login")';
    }

    function changePasswordMode(idTextBox) {
        var passwordEditor = $(idTextBox).dxTextBox("instance");
        passwordEditor.option("mode", passwordEditor.option("mode") === "text" ? "password" : "text");
    }
</script>
 